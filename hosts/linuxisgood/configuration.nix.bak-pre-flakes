# Edit this configuration file to define what should be installed on
# your system.  Help is available in the configuration.nix(5) man page
# and in the NixOS manual (accessible by running ‘nixos-help’).

{ config, pkgs, ... }:

# This let in block lets us mix unstable and stable packages! See https://discourse.nixos.org/t/installing-only-a-single-package-from-unstable/5598
# Note: This isn't entirely reproducable out-of-the-box. You have to follow the instructions to add a channel alias (nixos-unstable) to point to the unstable channel.
let
  unstable = import <nixos-unstable> { config = { allowUnfree = true; }; };
in {
  imports =
    [ # Include the results of the hardware scan.
      ./hardware-configuration.nix
    ];

  nix.settings.experimental-features = [ "nix-command" "flakes" ];

  # Bootloader.
  boot.loader.systemd-boot.enable = true;
  boot.loader.efi.canTouchEfiVariables = true;

  # Be able to mount my 2TB external hard drive
  boot.supportedFilesystems = [ "ntfs" ];

  networking.hostName = "linuxisgood"; # Define your hostname.
  # networking.wireless.enable = true;  # Enables wireless support via wpa_supplicant.

  # Enable networking
  networking.networkmanager = {
    enable = true;
  };

  # Set your time zone.
  time.timeZone = "America/Los_Angeles";

  # Select internationalisation properties.
  i18n.defaultLocale = "en_US.UTF-8";

  i18n.extraLocaleSettings = {
    LC_ADDRESS = "en_US.UTF-8";
    LC_IDENTIFICATION = "en_US.UTF-8";
    LC_MEASUREMENT = "en_US.UTF-8";
    LC_MONETARY = "en_US.UTF-8";
    LC_NAME = "en_US.UTF-8";
    LC_NUMERIC = "en_US.UTF-8";
    LC_PAPER = "en_US.UTF-8";
    LC_TELEPHONE = "en_US.UTF-8";
    LC_TIME = "en_US.UTF-8";
  };

  fonts.packages = with pkgs; [
    (nerdfonts.override { fonts = [ "FiraCode" "RobotoMono" ]; })
  ];

  # apply a Mutter patch via an overlay to fix the mouse-button/keyboard stuttering video output issue
  # maybe one day it will actually be merged
  nixpkgs.overlays = [ (final: prev: {
    gnome = prev.gnome.overrideScope' (gfinal: gprev: {
      mutter = gprev.mutter.overrideAttrs (oldAttrs: {
        patches = (oldAttrs.patches or []) ++ [
          # https://gitlab.gnome.org/GNOME/mutter/-/merge_requests/3143
          (prev.fetchpatch {
            url = "https://gitlab.gnome.org/GNOME/mutter/-/merge_requests/3143.patch";
            hash = "sha256-z89VbNPZRvKs+m76dpWKcCFhWZnX/69wnpBCMceeAI4=";
          })
        ];
      });
    });
  }) ];

  # Enable auto-upgrading, every Saturday @ 10am PT
  system.autoUpgrade = {
    enable = true;
    dates = "Sat *-*-* 10:00:00 America/Los_Angeles";
  };

  # Enable the X11 windowing system.
  services.xserver.enable = true;

  # Enable the GNOME Desktop Environment.
  services.xserver.displayManager.gdm.enable = true;
  services.xserver.desktopManager.gnome.enable = true;
  # Disable Wayland for GNOME...Albert and Autokey won't work without this
  services.xserver.displayManager.gdm.wayland = false;
  services.gnome.tracker-miners.enable = false;

  # KDE
  # services.xserver.displayManager.sddm.enable = true;
  # services.xserver.desktopManager.plasma5.enable = true;
  # services.xserver.displayManager.defaultSession = "plasmawayland";

  # Configure keymap in X11
  services.xserver = {
    layout = "us";
    xkbVariant = "";
  };

  # Enable CUPS to print documents.
  services.printing.enable = true;

  services.postgresql = {
    enable = true;
    package = pkgs.postgresql_12;
    authentication = pkgs.lib.mkForce ''
#      local   all             postgres                                md5

      # TYPE  DATABASE        USER            ADDRESS                 METHOD

      # "local" is for Unix domain socket connections only
      local   all             all                                     peer
      # IPv4 local connections:
      host    all             all             127.0.0.1/32            md5
      # IPv6 local connections:
 #     host    all             all             ::1/128                 md5
      # Allow replication connections from localhost, by a user with the
      # replication privilege.
  #    local   replication     all                                     peer
   #   host    replication     all             127.0.0.1/32            md5
    #  host    replication     all             ::1/128                 md5
    '';
#       local all       all       trust
#    initialScript = ''
 #     ALTER USER postgres WITH PASSWORD 'postgres';
  #  '';
  };

  # Enable sound with pipewire.
  sound.enable = true;

  hardware.enableAllFirmware = true;
  hardware.bluetooth = {
    enable = true;
    settings = {
      General = {
        Name = "BT Dongle";
        ControllerMode = "dual";
        #FastConnectable = "true";
        Enable = "Source,Sink,Media,Socket";
        Experimental = "true";
      };
      #Policy = {
      #  AutoEnable = "true";
      #};
    };
  };
  hardware.pulseaudio = {
    enable = false;
    #package = pkgs.pulseaudioFull;
  };
  security.rtkit.enable = true;
  services.pipewire = {
    enable = true;
    alsa.enable = true;
    alsa.support32Bit = true;
    pulse.enable = true;
    # If you want to use JACK applications, uncomment this
    #jack.enable = true;

    # use the example session manager (no others are packaged yet so this is enabled by default,
    # no need to redefine it in your config for now)
    #media-session.enable = true;
  };

  # Define a user account. Don't forget to set a password with ‘passwd’.
  users.users.snowful = {
    isNormalUser = true;
    description = "Ben";
    extraGroups = [ "networkmanager" "wheel" ];
    packages = with pkgs; [
      # Browsers
      firefox
      librewolf
      # Communications
      thunderbird
      element-desktop
      # Productivity/Workflow
      albert
      autokey
      pass
      # Utility
      gimp
      # Video
      obs-studio
      ffmpeg_6-full
      libsForQt5.kdenlive
    ];
  };

  # TMux setup
  programs.tmux = {
    enable = true;
    clock24 = true;
    escapeTime = 0;
    baseIndex = 1;
    keyMode = "vi";
    shortcut = "Space";
    # Set 24-bit color support. Might need to do "tmux-direct" if italics don't work re: https://search.nixos.org/options?channel=23.11&show=programs.tmux.terminal&from=0&size=50&sort=relevance&type=packages&query=programs.tmux
    terminal = "xterm-256color";
    plugins = with pkgs.tmuxPlugins; [ sensible vim-tmux-navigator onedark-theme yank ]; 
    extraConfig = ''
      # need this in addition to `terminal = "xterm-256color"` option for some reason
      set-option -sa terminal-overrides ",xterm*:Tc"

      # Enable mouse
      set -g mouse on

      # Shift + Alt + H or L to switch windows
      bind -n M-H previous-window
      bind -n M-L next-window

      # Plugins that require additional config before running
      # run-shell ${pkgs.tmuxPlugins.sensible}/share/tmux-plugins/sensible/sensible.tmux
    '';
  };

  # NeoVim setup
  programs.neovim = {
    enable = true;
    defaultEditor = true;
    configure = {
      # luafile ${/home/snowful/.config/nvim/init.lua}
      customRC = ''
lua <<EOF
print("nvim config v6")

--- THEME ---
local onedark = require('onedark')
onedark.setup {
    style = 'darker'
}
onedark.load()

--- OPTIONS ---
vim.opt.relativenumber = true
vim.opt.number = true
vim.opt.colorcolumn = "80,120"

-- set everything to be Elixir's 2-space indentation system by default. Should probably configure to be lang-specific
vim.o.expandtab = true -- expand tab input with spaces characters
vim.o.smartindent = true -- syntax aware indentations for newline inserts
vim.o.tabstop = 2 -- num of space characters per tab
vim.o.shiftwidth = 2 -- spaces per indentation level
-- disable netrw in favor of nvim-tree file explorer
vim.g.loaded_netrw = 1
vim.g.loaded_netrwPlugin = 1

--- KEY MAPPING ---
vim.g.mapleader = " "
vim.keymap.set("n", "<leader>fl", vim.cmd.NvimTreeFocus)
-- helpful lsp keybinds re: https://github.com/neovim/nvim-lspconfig#suggested-configuration
vim.keymap.set('n', '<leader>e', vim.diagnostic.open_float)
vim.keymap.set('n', '[d', vim.diagnostic.goto_prev)
vim.keymap.set('n', ']d', vim.diagnostic.goto_next)
vim.keymap.set('n', '<leader>q', vim.diagnostic.setloclist)

--- AUTO-COMPLETE ---
local cmp = require'cmp'

cmp.setup({
  snippet = {
    -- REQUIRED - you must specify a snippet engine
    expand = function(args)
      vim.fn["vsnip#anonymous"](args.body) -- For `vsnip` users.
      -- require('luasnip').lsp_expand(args.body) -- For `luasnip` users.
      -- require('snippy').expand_snippet(args.body) -- For `snippy` users.
      -- vim.fn["UltiSnips#Anon"](args.body) -- For `ultisnips` users.
    end,
  },
  window = {
    -- completion = cmp.config.window.bordered(),
    -- documentation = cmp.config.window.bordered(),
  },
  mapping = cmp.mapping.preset.insert({
    ['<C-b>'] = cmp.mapping.scroll_docs(-4),
    ['<C-f>'] = cmp.mapping.scroll_docs(4),
    ['<C-Space>'] = cmp.mapping.complete(),
    ['<C-e>'] = cmp.mapping.abort(),
    ['<CR>'] = cmp.mapping.confirm({ select = true }), -- Accept currently selected item. Set `select` to `false` to only confirm explicitly selected items.
  }),
  sources = cmp.config.sources({
    { name = 'nvim_lsp' },
    { name = 'vsnip' }, -- For vsnip users.
    -- { name = 'luasnip' }, -- For luasnip users.
    -- { name = 'ultisnips' }, -- For ultisnips users.
    -- { name = 'snippy' }, -- For snippy users.
  }, {
    { name = 'buffer' },
  })
})

--- FILE EXPLORER ---
require("nvim-tree").setup()

--- TREESITTER ---
require'nvim-treesitter.configs'.setup {
  highlight = {
    enable = true,

    -- Setting this to true will run `:h syntax` and tree-sitter at the same time.
    -- Set this to `true` if you depend on 'syntax' being enabled (like for indentation).
    -- Using this option may slow down your editor, and you may see some duplicate highlights.
    -- Instead of true it can also be a list of languages
    additional_vim_regex_highlighting = false,
  },
}

--- LSP STUFF ---
local lsp_zero = require('lsp-zero').preset({}) -- Is this preset needed?..

lsp_zero.on_attach(function(client, bufnr)
  -- see :help lsp-zero-keybindings
  -- to learn the available actions
  lsp_zero.default_keymaps({buffer = bufnr})
end)

-- lsp_zero.setup()
require('lspconfig').elixirls.setup({cmd = { "${pkgs.elixir-ls}/bin/elixir-ls" };})
-- local elixir = require("elixir")
-- local elixirls = require("elixir.elixirls")
-- elixir.setup()

require('lspconfig').elmls.setup({cmd = { "${pkgs.elmPackages.elm-language-server}/bin/elm-language-server" }})
-- require('lspconfig').rust_analyzer.setup({})

vim.g.rustaceanvim = {
  server = {
    capabilities = lsp_zero.get_capabilities()
  },
}

--- TELESCOPE / FUZZY SEARCH STUFF ---
local builtin = require('telescope.builtin')
vim.keymap.set('n', '<leader>ff', builtin.find_files, {})
vim.keymap.set('n', '<leader>fg', builtin.live_grep, {})
vim.keymap.set('n', '<leader>fb', builtin.buffers, {})
vim.keymap.set('n', '<leader>fh', builtin.help_tags, {})

-- format on save
vim.cmd [[autocmd BufWritePre * lua vim.lsp.buf.format()]]
-- vim.api.nvim_create_autocmd('BufWritePre', {
-- 	buffer = vim.fn.bufnr(),
-- 	callback = function()
-- 		vim.lsp.buf.format({ timeout_ms = 3000 })
-- 	end,
-- })

--- GIT ---
require('gitsigns').setup()

EOF
      '';
      packages.myPlugins = with pkgs.vimPlugins; {
        start = [
          # Syntax Highlighting
          (nvim-treesitter.withPlugins (plugins: with plugins; [ nix bash rust elixir elm eex heex json lua ]))
          ## Highlight token/word that the cursor is on
          vim-illuminate
          # LSP/Autocomplete
          lsp-zero-nvim
          nvim-cmp
          nvim-lspconfig
          cmp-nvim-lsp
          luasnip
          ## The actual LSPs
          elixir-tools-nvim # since elixir-ls path is used in the cmd in config above, do I even need this?? Try deleting later
          plenary-nvim # mystery plugin required else elixir ls breaks
          rustaceanvim
          # Fuzzy Search
          telescope-nvim
          # Themes
       	  onedark-nvim
          # File Explorer
          nvim-tree-lua
          nvim-web-devicons
          # Tmux integration
          vim-tmux-navigator
          # Git integration
          gitsigns-nvim
        ];
      };
    };
  };

  # Allow unfree packages
  nixpkgs.config.allowUnfree = true;

  # Needed for VSCode to work with Wayland apparently
  environment.sessionVariables.NIXOS_OZONE_WL = "1";

  # GNOME config? probably comment out when using KDE
  programs.dconf.enable = true;

  # Config the server `dict` should use
  environment.etc."dict.conf".text = "server dict.org";

  # List packages installed in system profile. To search, run:
  # $ nix search wget
  environment.systemPackages = with pkgs; [
    # dev stuff
    git
    gnupg
    elixir-ls
    unstable.elixir_1_16
    ## Need to install Erlang explicitly to get `epmd` for next-ls to work
    unstable.erlang
    unstable.elmPackages.elm # added "unstable." on 1/12 need to see after reboot if unstable version fixes this issue I was running into: https://github.com/NixOS/nixpkgs/issues/277156 
    unstable.elmPackages.elm-format
    inotify-tools # phoenix live-reload
    openssl
    gcc
    # Note: installing rust stuff using rustup means toolchains have to be installed imperatively, and after 
    # installing stable/nightly toolchains, will need to do things like 
    #`rustup component add rust-src && rustup component add rust-analyzer`
    # to install rust analyzer for nvim to pick up
    # more reading: 
    # - https://rust-analyzer.github.io/manual.html#installation
    # - https://nixos.wiki/wiki/Rust
    rustup
    # Neovim stuff
    ripgrep # this is used by nvim telescope plugin
    xclip # tmux-yank
    (unstable.vscode-with-extensions.override {
      vscodeExtensions = with unstable.vscode-extensions; [
        eamodio.gitlens
        rust-lang.rust-analyzer
        elixir-lsp.vscode-elixir-ls
        phoenixframework.phoenix
        elmtooling.elm-ls-vscode
        # asvetliakov.vscode-neovim
        #ms-dotnettools.csharp # teaching zander programming
      ];
          #     ++ vscode-utils.extensionsFromVscodeMarketplace [
      #  {
      #    name = "elixir-tools";
      #    publisher = "elixir-tools";
      #    version = "0.8.0";
      #    #sha256 = "1hp6gjh4xp2m1xlm1jsdzxw9d8frkiidhph6nvl24d0h8z34w49g";
      #    sha256 = "4QkCd2LgxSkwaRTcYIBOzB7UQqwiZXfIGm8yDxGjOSk=";
      #  }
      #];
    })

    # gnome stuff
    gnome3.gnome-tweaks
    gnome3.dconf-editor
    ## systray icons
    gnomeExtensions.appindicator
    gnomeExtensions.dash-to-dock
    ## why make it harder to take temp screenshots
    gnome.gnome-screenshot
    # gnomeExtensions.gnome-screenshot
    # general stuff
    libreoffice-qt
    hunspell
    dict
    endeavour
    unstable.obsidian
    duplicity
    # game stuff
    steam-run    
  ];

  # Install Steam
  programs.steam = {
    enable = true;
    remotePlay.openFirewall = false; # Open ports in the firewall for Steam Remote Play
    dedicatedServer.openFirewall = false; # Open ports in the firewall for Source Dedicated Server
  };

  # `gamemoderun` to pass to Steam game args
  programs.gamemode.enable = true;

  # "Ensure gnome-settings-daemon udev rules are enabled" https://nixos.wiki/wiki/GNOME
  services.udev.packages = with pkgs; [ gnome.gnome-settings-daemon ];

  ### Nvidia Stuff ###
  # https://nixos.wiki/wiki/Nvidia

  # Enable OpenGL
  hardware.opengl = {
    enable = true;
    driSupport = true;
    driSupport32Bit = true;
  };

  # Load nvidia driver for Xorg and Wayland
  services.xserver.videoDrivers = ["nvidia"];

  hardware.nvidia = {

    # Modesetting is needed most of the time
    modesetting.enable = true;

    # Enable power management (do not disable this unless you have a reason to).
    # Likely to cause problems on laptops and with screen tearing if disabled.
    powerManagement.enable = true; # 11/19 Setting to false to see if resuming from suspend black screen issue gets fixed - nope it completely broke suspend
    #powerManagement.finegrained = true; # maybe try setting this to true/false next?

    # Use the open source version of the kernel module ("nouveau")
    # Note that this offers much lower performance and does not
    # support all the latest Nvidia GPU features.
    # You most likely don't want this.
    # Only available on driver 515.43.04+
    open = false;

    # Enable the Nvidia settings menu,
    # accessible via `nvidia-settings`.
    nvidiaSettings = true;

    # Optionally, you may need to select the appropriate driver version for your specific GPU.
    package = config.boot.kernelPackages.nvidiaPackages.beta;
  };
  ### END Nvidia Stuff ###

  ## AUTO MOUNT STUFF ##
  # NOTE: this is commented out here, because it was generated by nixos-generate-config
  #       re: https://unix.stackexchange.com/questions/213137/how-to-auto-mount-permanently-mount-external-devices-on-nixos
  #       so, as of writing it lives in `/etc/nixos/hardware-configuration.nix`.
  #   fileSystems."/media/ubuntu_part" =
  #  { device = "/dev/disk/by-uuid/ca9e0aa9-f965-4528-a3c6-35c0776b9e43";
  #    fsType = "ext4";
  #  };

  # Auto-mount 2TB hard drive...
  fileSystems."/media/storage" = {
     device = "/dev/disk/by-uuid/060E0AA77FFD6A32";
     fsType = "auto";
   };
  ## END AUTO MOUNT STUFF ##

  # Some programs need SUID wrappers, can be configured further or are
  # started in user sessions.
  # programs.mtr.enable = true;
  programs.gnupg.agent = {
    enable = true;
  #   enableSSHSupport = true;
  };

  # List services that you want to enable:

  # Enable the OpenSSH daemon.
  # services.openssh.enable = true;

  # Open ports in the firewall.
  # networking.firewall.allowedTCPPorts = [ ... ];
  # networking.firewall.allowedUDPPorts = [ ... ];
  # Or disable the firewall altogether.
  # networking.firewall.enable = false;
  networking.firewall.enable = true;

  # This value determines the NixOS release from which the default
  # settings for stateful data, like file locations and database versions
  # on your system were taken. It‘s perfectly fine and recommended to leave
  # this value at the release version of the first install of this system.
  # Before changing this value read the documentation for this option
  # (e.g. man configuration.nix or on https://nixos.org/nixos/options.html).
  system.stateVersion = "23.05"; # Did you read the comment?

}
